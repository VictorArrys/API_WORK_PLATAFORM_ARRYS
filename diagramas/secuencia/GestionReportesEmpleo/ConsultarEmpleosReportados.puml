@startuml ConsultarEmpleosReportados

box Cliente
    actor Administrador as a
    participant ReportesEmpleos as b <<GUI>> 
    participant ReportesEmpleosController as c <<Controller>>
    participant ReporteEmpleoDAO as d <<DAO>>
end box

box Servidor
    participant ElCamelloAPI as e <<API>>
    participant GestionResportesEmpleo as f <<Componente>>
    participant ReporteEmpleoDAO as g <<DAO>>
    participant EmpleadorDAO as h <<DAO>>
    database elCamelloDB as db
end box

a -> b : cargarReportesEmpleo()
activate a
activate b

b -> c : cargarReportes()
activate c

c -> d : GetReportesEmpleo(\ntoken: string): Administrador
activate d

note right of d  
**headers**
x-access-token: string
end note

d -> e : **GET** /reportesEmpleo
activate e

e -> f : getReportesEmpleo(callback): Administrador
activate f

f -> g : getReportesEmpleo(callback): Administrador
activate g

g -> db : SELECT ReporteEmpleo WHERE estatus = 1
activate db

note right of db  
**payload**
[
    {
        id_reporte_empleo: int,
        id_perfil_aspirante_re: int,
        id_oferta_empleo_re: int,
        motivo: string,
        estatus: int,
        fecha_registro: date,
        aspirante: string,
        nombre: string,
        descripcion: string,
        idEmpleador: int,
        empleador: string
    }
    ...
    ...
    ...
]
end note

db -->> g : response

alt ReporteEmpleo consultada
    g ->> f : callback(200, response)
    
    f ->> e : callback(200, response)

    e -->> d: **OK** 200
    d -->> c: ReporteEmpleo :response

    alt Aceptar ReporteEmpleo

        a -> b : aprobarReporteEmpleo()

        b -> c : aceptarReporte()

        c -> d : PatchAceptarReporte(\ntoken: string, \nidReporte: int): Administrador

        note right of d  
        **headers**
        x-access-token: string
        end note

        d -> e : **PATCH** /reportesEmpleo/:idReporteEmpleo/aceptado

        e -> f : aceptarReporteEmpleo(\nidReporteEmpleo, callback): Administrador

        f -> g : aceptarReporteEmpleo(\nidReporteEmpleo, callback): Administrador

        g -> db : UPDATE reporte_empleo SET estatus = 0 WHERE idReporteEmpleo

        note right of db  
        **payload**
            {
                id_reporte_empleo: int,
                id_perfil_aspirante_re: int,
                id_oferta_empleo_re: int,
                motivo: string,
                estatus: int,
                fecha_registro: date,
                aspirante: string,
                nombre: string,
                descripcion: string,
                idEmpleador: int,
                empleador: string
            }
        end note

        db -->> g : response

        alt ReporteEmpleo aprobado
            g ->> f : callback(200, response)
            
            f ->> e : callback(200, response)

            e -->> d: **OK** 200
            d -->> c: ReporteEmpleo :response

            alt Amonestar empleador

            f -> h : amonestarEmpleador(\nidEmpleador callback): Administrador

            g -> db : UPDATE perfil_empleador SET amonestaciones = amonestaciones + 1 WHERE idEmpleador

            note right of db  
            **payload**
                {
                    resultadoAmonestar: int
                }
            end note

            db -->> g : response

            alt Empleador amonestado
                h ->> f : callback(200, response)
                
                f ->> e : callback(200, response)

                e -->> d: **OK** 200
                d -->> c: resultadoAmonestar :response

                
            else Error interno
                h ->> f : callback(500, mensaje)

                f ->> e : callback(500, mensaje)

                e -->> d: **INTERNAL ERROR** 500

                d -->> c: null

                c ->> c: mostrarMensaje\nErrorInternoServidor()
            else Peticion incorrecta
                h ->> f : callback(404, mensaje)
                deactivate g

                f ->> e : callback(404, mensaje)
                deactivate f

                e -->> d: **NOT FOUND** 404
                deactivate e

                d -->> c: null
                deactivate d

                c ->> c: mostrarMensaje\nPeticionNoEncontrada()
            else Maximo de amonestaciones alcanzado
                h ->> f : callback(403, mensaje)
                deactivate g

                f ->> e : callback(403, mensaje)
                deactivate f

                e -->> d: **FORBIDEN** 403
                deactivate e

                d -->> c: null
                deactivate d

                c ->> c: mostrarMensaje\nProhibido()

            end

        end

            
        else Error interno
            g ->> f : callback(500, mensaje)

            f ->> e : callback(500, mensaje)

            e -->> d: **INTERNAL ERROR** 500

            d -->> c: null

            c ->> c: mostrarMensaje\nErrorInternoServidor()
        else Peticion incorrecta
            g ->> f : callback(404, mensaje)
            deactivate g

            f ->> e : callback(404, mensaje)
            deactivate f

            e -->> d: **NOT FOUND** 404
            deactivate e

            d -->> c: null
            deactivate d

            c ->> c: mostrarMensaje\nPeticionNoEncontrada()

        end
    else Rechazar ReporteEmpleo

        a -> b : rechazarReporteEmpleo()

        b -> c : rechazarReporte()

        c -> d : PatchRechazarReporte(\ntoken: string, \nidReporte: int): Administrador

        note right of d  
        **headers**
        x-access-token: string
        end note

        d -> e : **PATCH** /reportesEmpleo/:idReporteEmpleo/rechazado

        e -> f : rechazarReporteEmpleo(\nidReporteEmpleo, callback): Administrador

        f -> g : rechazarReporteEmpleo(\nidReporteEmpleo, callback): Administrador

        g -> db : UPDATE reporte_empleo SET estatus = -1 WHERE idReporteEmpleo

        note right of db  
        **payload**
            {
                id_reporte_empleo: int,
                id_perfil_aspirante_re: int,
                id_oferta_empleo_re: int,
                motivo: string,
                estatus: int,
                fecha_registro: date,
                aspirante: string,
                nombre: string,
                descripcion: string,
                idEmpleador: int,
                empleador: string
            }
        end note

        db -->> g : response

        alt ReporteEmpleo rechazado
            g ->> f : callback(200, response)
            
            f ->> e : callback(200, response)

            e -->> d: **OK** 200
            d -->> c: ReporteEmpleo :response

        end
            
        else Error interno
            g ->> f : callback(500, mensaje)

            f ->> e : callback(500, mensaje)

            e -->> d: **INTERNAL ERROR** 500

            d -->> c: null

            c ->> c: mostrarMensaje\nErrorInternoServidor()
        else Peticion incorrecta
            g ->> f : callback(404, mensaje)
            deactivate g

            f ->> e : callback(404, mensaje)
            deactivate f

            e -->> d: **NOT FOUND** 404
            deactivate e

            d -->> c: null
            deactivate d

            c ->> c: mostrarMensaje\nPeticionNoEncontrada()

        end

    end
    
else Error interno
    g ->> f : callback(500, mensaje)

    f ->> e : callback(500, mensaje)

    e -->> d: **INTERNAL ERROR** 500

    d -->> c: null

    c ->> c: mostrarMensaje\nErrorInternoServidor()
else Peticion incorrecta
    g ->> f : callback(404, mensaje)
    deactivate g

    f ->> e : callback(404, mensaje)
    deactivate f

    e -->> d: **NOT FOUND** 404
    deactivate e

    d -->> c: null
    deactivate d

    c ->> c: mostrarMensaje\nPeticionNoEncontrada()

end

@enduml
